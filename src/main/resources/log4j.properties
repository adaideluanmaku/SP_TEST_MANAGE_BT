# Output pattern : date [thread] priority category - message
log4j.rootLogger=info, Console, RollingFile

##Appenders##

#Console Appender
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p %-40.40c -%m%n

#RollingFile Appender(Store application message, hourly rolling, threshold is INFO)
log4j.appender.RollingFile=org.apache.log4j.DailyRollingFileAppender
#\u8bf7\u4fee\u6539\u4e3a\u672c\u9879\u76ee\u7684log\u6587\u4ef6#
log4j.appender.RollingFile.File=/logs/SP_TEST_MANAGE.log 
log4j.appender.RollingFile.Threshold=debug
log4j.appender.RollingFile.File.DatePattern=.yyyy-MM-dd-HH
log4j.appender.RollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFile.layout.ConversionPattern=%d [%t] %-5p %-40.40c -%m%n
#%m   输出代码中指定的消息
#%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#%r   输出自应用启动到输出该log信息耗费的毫秒数 
#%c   输出所属的类目，通常就是所在类的全名 
#%t   输出产生该日志事件的线程名 
#%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
#%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 



##Loggers##

#Project defalult level
log4j.logger.com.ch=error

#log4jdbc
log4j.logger.jdbc.sqltiming=error

log4j.logger.org.springframework.jdbc.core.JdbcTemplate=error



